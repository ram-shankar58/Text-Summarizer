from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from transformers import pipeline, T5Tokenizer, T5ForConditionalGeneration
from summarizer import Summarizer
from sentence_transformers import SentenceTransformer, util
from concurrent.futures import ThreadPoolExecutor

# Initialize outside the functions
global_vectorizer = TfidfVectorizer()
summarizer_model = pipeline("summarization")
tokenizer_t5 = T5Tokenizer.from_pretrained('t5-base')
model_t5 = T5ForConditionalGeneration.from_pretrained('t5-base')
bert_model = Summarizer()
paraphrase_model = SentenceTransformer('paraphrase-MiniLM-L6-v2')

# Fit the vectorizer once on a large corpus of text
corpus = "Your large corpus of text goes here."
global_vectorizer.fit(corpus.split('.'))

# Extractive Summarization Function using BERT
def bert_extractive_summarization(text, ratio=0.5):
    return bert_model(text, ratio=ratio)

# Abstractive Summarization Function using T5
def t5_abstractive_summarization(text):
    inputs = tokenizer_t5.encode("summarize: " + text, return_tensors='pt', max_length=512, truncation=True)
    outputs = model_t5.generate(inputs, max_length=150, length_penalty=2.0, num_beams=2, early_stopping=True)
    return tokenizer_t5.decode(outputs[0])

# Paraphrasing Function
def paraphrase_sentences(sentences):
    paraphrased_sentences = paraphrase_model.encode(sentences, convert_to_tensor=True)
    return [paraphrase_model.decode(sentence) for sentence in paraphrased_sentences]

# Query-Based Summarization Function
def query_based_summarization(query, text, num_sentences=3):
    combined_text = query + ' ' + text
    sentences = combined_text.split('.')
    paraphrased_sentences = paraphrase_sentences(sentences)
    vectors = global_vectorizer.transform(paraphrased_sentences)
    query_vector = vectors[0]
    cosine_similarities = cosine_similarity(query_vector, vectors).flatten()
    ranked_sentences = [(sentence, score) for sentence, score in zip(paraphrased_sentences, cosine_similarities)]
    ranked_sentences = sorted(ranked_sentences, key=lambda x: x[1], reverse=True)
    summary_sentences = [sentence for sentence, _ in ranked_sentences[:num_sentences]]
    return ' '.join(summary_sentences)

# Main Function to Combine Summarizations
def combined_summarization(text, query=None):
    with ThreadPoolExecutor() as executor:
        bert_extractive_future = executor.submit(bert_extractive_summarization, text)
        t5_abstractive_future = executor.submit(t5_abstractive_summarization, text)
        if query:
            query_based_future = executor.submit(query_based_summarization, query, text)

    print("BERT Extractive Summary:")
    print(bert_extractive_future.result())
    print("\nT5 Abstractive Summary:")
    print(t5_abstractive_future.result())
    if query:
        print("\nQuery-Based Summary:")
        print(query_based_future.result())

# Example Usage
text = '''Netflix is synonymous with streaming, but its competitors have a distinct advantage that threatens the streaming leader's position at the top.
Disney has Disney+, but it also has theme parks, plush Baby Yoda dolls, blockbuster Marvel movies and ESPN. Comcast (CMCSA), Amazon (AMZN), ViacomCBS (VIACA), CNN's parent company WarnerMedia and Apple (AAPL) all have their own streaming services, too, but they also have other forms of revenue.
As for Netflix (NFLX), its revenue driver is based entirely on building its subscriber base. It's worked out well for the company - so far. But it's starting to look like the king of streaming will soon need something other than new subscribers to keep growing.
The streaming service reported Tuesday it now has 208 million subscribers globally, after adding 4 million subscribers in the first quarter of 2021. But that number missed expectations and the forecasts for its next quarter were also pretty weak.
That was a big whiff for Netflix - a company coming off a massive year of growth thanks in large part to the pandemic driving people indoors - and Wall Street's reaction has not been great.
The company's stock dropped as much as 8% on Wednesday, leading some to wonder what the future of the streamer looks like if competition continues to gain strength, people start heading outdoors and if, most importantly, its growth slows.'''
query = "What is this topic about?"
combined_summarization(text, query)
